"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 1.10.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import raven
import pyhts
from django.contrib import messages
import errno

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# This is where state-specific files are stored, like uploads/downloads and
# the SQLite database, if applicable
STATE_DIR = os.path.join(BASE_DIR, '_state')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DJANGO_DEBUG'].lower() == 'true'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost' if
                               DEBUG else '').split(' ')

INTERNAL_IPS = '127.0.0.1'

# Application definition

INSTALLED_APPS = [
    'pyhts',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'raven.contrib.django.raven_compat',
    'custom_user',
    'allauth',
    'allauth.account',
    'invitations',
    'crispy_forms',
    'webpack_loader'
]

SITE_ID = 1
MIGRATION_MODULES = {
    'sites': 'pyhts.fixtures.sites_migrations',
}

MIDDLEWARE = []

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar', 'debug_panel']
    # MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    MIDDLEWARE += ['debug_panel.middleware.DebugPanelMiddleware']

MIDDLEWARE += [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web.wsgi.application'

EMAIL_HOST = os.environ['DJANGO_EMAIL_HOST']
EMAIL_PORT = os.environ['DJANGO_EMAIL_PORT']
EMAIL_HOST_USER = os.environ['DJANGO_EMAIL_USER']
EMAIL_HOST_PASSWORD = os.environ['DJANGO_EMAIL_PASSWORD']
EMAIL_USE_TLS = True

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

if os.environ.get('DJANGO_DATABASE', None) == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
            'NAME': os.environ.get('POSTGRES_DB', False) or
                    os.environ.get('POSTGRES_USER', 'postgres'),
            'USER': os.environ.get('POSTGRES_USER', 'postgres'),
            'PASSWORD': os.environ['POSTGRES_PASSWORD'],
            'PORT': os.environ.get('POSTGRES_PORT', '')
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(STATE_DIR, 'thunor.sqlite3'),
        }
    }


# CACHES = {
#     'default': {},
#
#     # this cache backend will be used by django-debug-panel
#     'debug-panel': {
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         'LOCATION': '/var/tmp/debug-panel-cache',
#         'TIMEOUT': 600,
#         'OPTIONS': {
#             'MAX_ENTRIES': 200
#         }
#     }
# }

RAVEN_CONFIG = {
    'dsn': os.environ.get('DJANGO_SENTRY_DSN', None),
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    'environment': os.environ.get('DJANGO_SENTRY_ENVIRONMENT',
                                  'development' if DEBUG else 'production'),
    'release': pyhts.__version__,
}


AUTH_USER_MODEL = 'custom_user.EmailUser'
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_FORMS = {'login': 'pyhts.forms.CentredAuthForm',
                 'change_password': 'pyhts.forms.ChangePasswordForm',
                 'reset_password': 'pyhts.forms.ResetPasswordForm',
                 'reset_password_from_key': 'pyhts.forms.ResetPasswordKeyForm',
                 'set_password': 'pyhts.forms.SetPasswordForm',
                 'signup': 'pyhts.forms.SignUpForm',
                 'add_email': 'pyhts.forms.AddEmailForm'}
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False

LOGIN_REDIRECT_URL = 'pyhts:home'

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


INVITATIONS_GONE_ON_ACCEPT_ERROR = False
INVITATIONS_INVITATION_ONLY = True
INVITATIONS_ACCEPT_INVITE_AFTER_SIGNUP = True
ACCOUNT_ADAPTER = 'invitations.models.InvitationsAdapter'
INVITATIONS_ADAPTER = ACCOUNT_ADAPTER

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CRISPY_TEMPLATE_PACK = 'bootstrap3'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = os.environ.get('DJANGO_STATIC_URL', '/static/')
STATICFILES_DIRS = (os.path.join(STATE_DIR, 'thunor-static'), )
WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': '',
        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'TIMEOUT': None,
        'IGNORE': ['.+\.map']
    }
}

MEDIA_ROOT = os.environ.get('DJANGO_MEDIA_ROOT', os.path.join(STATE_DIR,
                                                              'thunor-files'))
MEDIA_URL = os.environ.get('DJANGO_MEDIA_URL', '/_state/thunor-files/')

# These DOWNLOADS_* settings need to match nginx config
DOWNLOADS_ROOT = os.path.join(MEDIA_ROOT, 'downloads')
DOWNLOADS_URL = '/_thunor_downloads/'
# Delete ephemeral download files after this amount of time
DOWNLOAD_EPHEMERAL_PURGE_DAYS = 7

try:
    os.makedirs(DOWNLOADS_ROOT)
except OSError as exc:
    if exc.errno != errno.EEXIST:
        raise

LOGGING = {
    'version': 1,
    'disable_existing_loggers': not DEBUG,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'WARNING',
            'filters': ['require_debug_false'],
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {},
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'root': {
            'level': 'DEBUG' if DEBUG else 'WARNING',
            'handlers': ['sentry'],
        },
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': [] if DEBUG else ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': [] if DEBUG else ['console'],
            'propagate': False,
        },
    },
}
